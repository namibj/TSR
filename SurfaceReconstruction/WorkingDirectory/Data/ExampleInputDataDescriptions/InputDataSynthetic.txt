// where to store the data
string sceneFolder = Data; // scene root folder where all the data is
string relativeCamerasFileName = Cameras.txt; // where to save the cameras file for the automatically and randomly generated synthetic cameras, relative to "<sceneFolder>/Results"

// how many cameras, image resolution, focal length boundaries, minimum distance to surface
uint32 cameraCount = 250;  // how many random synthetic views shall be created?
uint32 imageWidth = 100; // width in pixels of each synthetic view
uint32 imageHeight = 70; // height in pixels of each synthetic view
Real minimumFocalLength = 2.0; // lower bound for synthetic camera focal length
Real maximumFocalLength = 6.0; // upper bound for synthetic camera focal length
Real minimumDepth = 8.0; // minimum distance (in scene units) of a sample between camera projection center and surface (no samples closer than that are created)

// camera distribution parameters
// scene box size defining where to put the cameras
Real relativeSceneBorderX = 10.0; // width of the scene for defining a bounding box in which cameras are allowed to be created)
Real relativeSceneBorderY = 3.0; // height of the scene for defining a bounding box in which cameras are allowed to be created)
Real relativeSceneBorderZ = 1.5; // depth of the scene for defining a bounding box in which cameras are allowed to be created)

Real cameraBalance = 3.0; //  set this to 1 for an approximately balanced scene and to a higher value to have more views on one side of the scene than the other

// sample noise (Gaussian distribution)
Real relativeNoiseMean = 0.00; // mean of the noise to be added to the samples - I don't see a use case where it is reasonable to change this - keep it zero
Real relativeNoiseStandardDeviation = 0.00; // higher values mean more normal distribution noise on depth map values from ray tracing, see the paper or code for the exact impact of this noise standard deviation value

// synthetic input object to be sampled
string groundTruthFile = Data/SyntheticWedgeComplex.ply; // ply file containing ground truth object which is ray traced for depth maps; noise is optionally added; depths are converted to a point cloud; TSR reconstructs it.
